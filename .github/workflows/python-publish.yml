# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  push:
    tags:
      - v*

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Check version matches
      run: |
        # Extract version from pyproject.toml using Python
        PACKAGE_VERSION=$(python -c "import tomli; print(tomli.loads(open('pyproject.toml', 'rb').read().decode('utf-8'))['project']['version'])")
        # Extract version from git tag (remove 'v' prefix)
        GIT_TAG_VERSION=${GITHUB_REF#refs/tags/v}
        # Compare versions
        if [ "$PACKAGE_VERSION" != "$GIT_TAG_VERSION" ]; then
          echo "Error: Version mismatch between pyproject.toml ($PACKAGE_VERSION) and git tag ($GIT_TAG_VERSION)"
          exit 1
        fi
        echo "Version check passed: $PACKAGE_VERSION"
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m build
        twine upload dist/*
    - name: Check if the job has failed
      if: ${{ failure() }}
      run: |
        curl --request POST \
        --url 'https://api.notefile.net/?product=${{ secrets.NOTEHUB_PRODUCT_UID }}&device=${{ secrets.NOTECARD_DEVICE_ID }}' \
        --header 'Content-Type: application/json' \
        --header 'X-Session-Token: ${{ secrets.NOTEHUB_SESSION_TOKEN }}' \
        --data '{"req":"note.add","file":"build_results.qi","body":{"result":"upload_failed"}}'

